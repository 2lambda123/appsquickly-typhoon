<assembly xmlns="http://www.typhoonframework.org/schema/assembly"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.typhoonframework.org/schema/assembly
          http://www.typhoonframework.org/schema/assembly.xsd">

    <description>
        This is the application assembly. The schema declaration above gives code-completion in supported IDEs
        (works in AppCode, but the Xcode XML editor doesn't resolve schemas, it seems).
        Dependencies can be resolved by reference (ie a name), by matching the required type or protocol or by value.
        Dependencies can be declared in any order - Spring Objective-C will work out how to resolve them.
    </description>

    <component class="Knight" key="knight">
        <property name="quest" ref="quest">
            <description>
                Properties can be injected by reference.
            </description>
        </property>
        <property name="damselsRescued" value="12">
            <description>
                Property arguments can also be injected by value. The container will look up the required
                class or primitive type. It's easy to register your own additional converters.
            </description>
        </property>
    </component>

    <component class="Knight" key="knightWithCollections">
        <initializer selector="initWithQuest:">
            <argument parameterName="quest" ref="quest"/>
        </initializer>

        <property name="favoriteDamsels">
            <collection>
                <value requiredType="NSString">mary</value>
                <value requiredType="NSString">jane</value>
            </collection>
        </property>

        <property name="friends">
            <collection>
                <ref>knight</ref>
                <ref>anotherKnight</ref>
            </collection>
        </property>

    </component>
    
    <component class="Knight" key="knithWithCollectionInConstructor">
        <initializer selector="initWithQuest:favoriteDamsels:">
            <argument parameterName="quest" ref="quest"/>
            <argument parameterName="favoriteDamsels">
                <collection requiredType="NSArray">
                    <value requiredType="NSString">Mary</value>
                    <value requiredType="NSString">Jane</value>
                </collection>
            </argument>
        </initializer>
    </component>

    

    <component class="CampaignQuest" key="quest" scope="prototype" before-property-injection="questBeforePropertyInjection"
               after-property-injection="questAfterPropertyInjection">
        <description>
            Knight has a dependency on any class conforming to the Quest protocol. In this case it's a
            [CampaignQuest class].

            Note the 'after-property-injection' attribute. This is a custom method that can be called after all
            properties have been injected.
        </description>

        <property name="imageUrl" value="http://www.appsquick.ly/theQuest.jpg">
            <description>
                This is a property of type NSURL. The container will convert the supplied string value
                and inject it for us.

                Besides the primitive types (int, BOOL, etc), a handful of useful object conversion types
                are included. You can also easily register your own additional converters.
            </description>
        </property>
    </component>

    <component class="CampaignQuest" key="anotherQuest" scope="prototype">
        <initializer selector="initWithImageUrl:">
            <argument parameterName="imageUrl" value="http://www.foobar.com" required-class="NSURL"/>
        </initializer>
    </component>

    <component class="CavalryMan" key="anotherKnight" scope="singleton">
        <description>
            This time, we're using initializer injection. As shown below, you can also mix initializer
            injection with property injection.
        </description>
        <initializer selector="initWithQuest:hitRatio:">
            <argument parameterName="quest" ref="quest"/>
            <argument index="1" value="13.75"/>
        </initializer>
        <property name="hasHorseWillTravel" value="yes">
            <description>
                This is a primitive property of type BOOL.
            </description>
        </property>
    </component>

    <component class="CavalryMan" key="yetAnotherKnight">
        <description>
            This time, we're using initializer injection. As shown below, you can also mix initializer
            injection with property injection.
        </description>
        <initializer selector="initWithQuest:">
            <argument parameterName="quest" ref="quest"/>
        </initializer>
        <property name="hasHorseWillTravel" value="yes">
            <description>
                This is a primitive property of type BOOL.
            </description>
        </property>
        <property name="hitRatio" value="13.75"/>
    </component>


    <component class="NSURL" key="serviceUrl">
        <description>
            This is an example of a component instantiated from a class method. (In fact, you could inject
            an NSURL instance directly by value, but anyway. . . ).

            Note the "is-class-method" attribute: Spring Objective-C will normally guess this, so if the method
            follows objective-c naming conventions, this wouldn't be needed. That is to say, if the method name
            starts with "init" it will be treated as an instance method, otherwise it will be resolved as a
            class method. . . supplying this attribute will override Spring Objective-C's guess.
        </description>
        <initializer selector="URLWithString:" is-class-method="yes">
            <description>
                Unlike property injection, initializer arguments require type to be set explicitly, unless the
                type is a primitive - BOOL, int, etc. . . (This is because the Objective-C runtime doesn't
                include detailed type information for selectors - only whether the type is an object or
                primitive type. (The container will remind you to set this attribute if you forget).
            </description>
            <argument parameterName="string" value="http://dev.foobar.com/service/" required-class="NSString"/>
        </initializer>
    </component>

    <component class="SwordFactory" key="swordFactory">
        <description>
            This is a factory component.
        </description>
    </component>

    <component class="Sword" key="blueSword" factory-component="swordFactory">
        <description>
            This is a component that has been manufactured from a factory component.
        </description>
        <initializer selector="swordWithSpecification:">
            <argument parameterName="specification" value="blue" required-class="NSString"/>
        </initializer>
    </component>


</assembly>
